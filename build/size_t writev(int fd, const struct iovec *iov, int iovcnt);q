READV(2)                                       Linux Programmer's Manual                                       READV(2)

NNAAMMEE
       readv, writev, preadv, pwritev, preadv2, pwritev2 - read or write data into multiple buffers

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//uuiioo..hh>>

       ssssiizzee__tt rreeaaddvv((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t));;

       ssssiizzee__tt wwrriitteevv((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t));;

       ssssiizzee__tt pprreeaaddvv((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t,,
                      ooffff__tt _o_f_f_s_e_t));;

       ssssiizzee__tt ppwwrriitteevv((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t,,
                       ooffff__tt _o_f_f_s_e_t));;

       ssssiizzee__tt pprreeaaddvv22((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t,,
                       ooffff__tt _o_f_f_s_e_t,, iinntt _f_l_a_g_s));;

       ssssiizzee__tt ppwwrriitteevv22((iinntt _f_d,, ccoonnsstt ssttrruucctt iioovveecc **_i_o_v,, iinntt _i_o_v_c_n_t,,
                        ooffff__tt _o_f_f_s_e_t,, iinntt _f_l_a_g_s));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       pprreeaaddvv(), ppwwrriitteevv():
           Since glibc 2.19:
               _DEFAULT_SOURCE
           Glibc 2.19 and earlier:
               _BSD_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  rreeaaddvv() system call reads _i_o_v_c_n_t buffers from the file associated with the file descriptor _f_d into the buf‐
       fers described by _i_o_v ("scatter input").

       The wwrriitteevv() system call writes _i_o_v_c_n_t buffers of data described by _i_o_v to the file  associated  with  the  file
       descriptor _f_d ("gather output").

       The pointer _i_o_v points to an array of _i_o_v_e_c structures, defined in _<_s_y_s_/_u_i_o_._h_> as:

           struct iovec {
               void  *iov_base;    /* Starting address */
               size_t iov_len;     /* Number of bytes to transfer */
           };

       The rreeaaddvv() system call works just like rreeaadd(2) except that multiple buffers are filled.

       The wwrriitteevv() system call works just like wwrriittee(2) except that multiple buffers are written out.

       Buffers  are  processed  in  array  order.  This means that rreeaaddvv() completely fills _i_o_v[0] before proceeding to
       _i_o_v[1], and so on.  (If there is insufficient data, then not all buffers pointed to by _i_o_v may be filled.)  Sim‐
       ilarly, wwrriitteevv() writes out the entire contents of _i_o_v[0] before proceeding to _i_o_v[1], and so on.

       The  data  transfers  performed by rreeaaddvv() and wwrriitteevv() are atomic: the data written by wwrriitteevv() is written as a
       single block that is not intermingled with output from writes in other processes (but see ppiippee(7) for an  excep‐
       tion);  analogously,  rreeaaddvv() is guaranteed to read a contiguous block of data from the file, regardless of read
       operations performed in other threads or processes that have file descriptors referring to the  same  open  file
       description (see ooppeenn(2)).

   pprreeaaddvv(()) aanndd ppwwrriitteevv(())
       The  pprreeaaddvv()  system  call  combines  the  functionality of rreeaaddvv() and pprreeaadd(2).  It performs the same task as
       rreeaaddvv(), but adds a fourth argument, _o_f_f_s_e_t, which specifies the file offset at which the input operation is  to
       be performed.

       The  ppwwrriitteevv()  system  call combines the functionality of wwrriitteevv() and ppwwrriittee(2).  It performs the same task as
       wwrriitteevv(), but adds a fourth argument, _o_f_f_s_e_t, which specifies the file offset at which the output  operation  is
       to be performed.

       The file offset is not changed by these system calls.  The file referred to by _f_d must be capable of seeking.

   pprreeaaddvv22(()) aanndd ppwwrriitteevv22(())
       These  system calls are similar to pprreeaaddvv() and ppwwrriitteevv() calls, but add a fifth argument, _f_l_a_g_s, which modifies
       the behavior on a per-call basis.

       Unlike pprreeaaddvv() and ppwwrriitteevv(), if the _o_f_f_s_e_t argument is -1, then the current file offset is used and updated.

       The _f_l_a_g_s argument contains a bitwise OR of zero or more of the following flags:

       RRWWFF__DDSSYYNNCC (since Linux 4.7)
              Provide a per-write equivalent of the OO__DDSSYYNNCC ooppeenn(2) flag.  This flag is meaningful only for ppwwrriitteevv22(),
              and its effect applies only to the data range written by the system call.

       RRWWFF__HHIIPPRRII (since Linux 4.6)
              High  priority  read/write.   Allows block-based filesystems to use polling of the device, which provides
              lower latency, but may use additional resources.  (Currently, this feature  is  usable  only  on  a  file
              descriptor opened using the OO__DDIIRREECCTT flag.)

       RRWWFF__SSYYNNCC (since Linux 4.7)
              Provide  a per-write equivalent of the OO__SSYYNNCC ooppeenn(2) flag.  This flag is meaningful only for ppwwrriitteevv22(),
              and its effect applies only to the data range written by the system call.

       RRWWFF__NNOOWWAAIITT (since Linux 4.14)
              Do not wait for data which is not immediately available.  If this flag is specified, the pprreeaaddvv22() system
              call will return instantly if it would have to read data from the backing storage or wait for a lock.  If
              some data was successfully read, it will return the number of bytes read.  If no bytes were read, it will
              return -1 and set _e_r_r_n_o to EEAAGGAAIINN.  Currently, this flag is meaningful only for pprreeaaddvv22().

RREETTUURRNN VVAALLUUEE
       On  success, rreeaaddvv(), pprreeaaddvv() and pprreeaaddvv22() return the number of bytes read; wwrriitteevv(), ppwwrriitteevv() and ppwwrriitteevv22()
       return the number of bytes written.

       Note that it is not an error for a successful call to transfer fewer  bytes  than  requested  (see  rreeaadd(2)  and
       wwrriittee(2)).

       On error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       The  errors  are as given for rreeaadd(2) and wwrriittee(2).  Furthermore, pprreeaaddvv(), pprreeaaddvv22(), ppwwrriitteevv(), and ppwwrriitteevv22()
       can also fail for the same reasons as llsseeeekk(2).  Additionally, the following errors are defined:

       EEIINNVVAALL The sum of the _i_o_v___l_e_n values overflows an _s_s_i_z_e___t value.

       EEIINNVVAALL The vector count, _i_o_v_c_n_t, is less than zero or greater than the permitted maximum.

       EEIINNVVAALL An unknown flag is specified in _f_l_a_g_s.

VVEERRSSIIOONNSS
       pprreeaaddvv() and ppwwrriitteevv() first appeared in Linux 2.6.30; library support was added in glibc 2.10.

       pprreeaaddvv22() and ppwwrriitteevv22() first appeared in Linux 4.6.  Library support was added in glibc 2.26.

CCOONNFFOORRMMIINNGG TTOO
       rreeaaddvv(), wwrriitteevv(): POSIX.1-2001, POSIX.1-2008, 4.4BSD (these system calls first appeared in 4.2BSD).

       pprreeaaddvv(), ppwwrriitteevv(): nonstandard, but present also on the modern BSDs.

       pprreeaaddvv22(), ppwwrriitteevv22(): nonstandard Linux extension.

NNOOTTEESS
       POSIX.1 allows an implementation to place a limit on the number of items that can be passed in _i_o_v.   An  imple‐
       mentation  can  advertise  its  limit by defining IIOOVV__MMAAXX in _<_l_i_m_i_t_s_._h_> or at run time via the return value from
       _s_y_s_c_o_n_f_(___S_C___I_O_V___M_A_X_).  On modern Linux systems, the limit is 1024.  Back in Linux 2.0 days, this limit was 16.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The raw pprreeaaddvv() and ppwwrriitteevv() system calls have call signatures that differ slightly from that  of  the  corre‐
       sponding  GNU C library wrapper functions shown in the SYNOPSIS.  The final argument, _o_f_f_s_e_t, is unpacked by the
       wrapper functions into two arguments in the system calls:

           uunnssiiggnneedd lloonngg _p_o_s___l,, uunnssiiggnneedd lloonngg _p_o_s

       These arguments contain, respectively, the low order and high order 32 bits of _o_f_f_s_e_t.

   HHiissttoorriiccaall CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       To deal with the fact that IIOOVV__MMAAXX was so low on early versions  of  Linux,  the  glibc  wrapper  functions  for
       rreeaaddvv()  and wwrriitteevv() did some extra work if they detected that the underlying kernel system call failed because
       this limit was exceeded.  In the case of rreeaaddvv(), the wrapper function allocated a temporary buffer large enough
       for  all  of the items specified by _i_o_v, passed that buffer in a call to rreeaadd(2), copied data from the buffer to
       the locations specified by the _i_o_v___b_a_s_e fields of the elements of _i_o_v, and then freed the buffer.   The  wrapper
       function for wwrriitteevv() performed the analogous task using a temporary buffer and a call to wwrriittee(2).

       The  need  for  this  extra  effort in the glibc wrapper functions went away with Linux 2.2 and later.  However,
       glibc continued to provide this behavior until version 2.10.  Starting with glibc version 2.9, the wrapper func‐
       tions  provide  this  behavior  only if the library detects that the system is running a Linux kernel older than
       version 2.6.18 (an arbitrarily selected kernel version).  And since glibc 2.20 (which requires a  minimum  Linux
       kernel version of 2.6.32), the glibc wrapper functions always just directly invoke the system calls.

EEXXAAMMPPLLEE
       The following code sample demonstrates the use of wwrriitteevv():

           char *str0 = "hello ";
           char *str1 = "world\n";
           struct iovec iov[2];
           ssize_t nwritten;

           iov[0].iov_base = str0;
           iov[0].iov_len = strlen(str0);
           iov[1].iov_base = str1;
           iov[1].iov_len = strlen(str1);

           nwritten = writev(STDOUT_FILENO, iov, 2);

SSEEEE AALLSSOO
       pprreeaadd(2), rreeaadd(2), wwrriittee(2)

CCOOLLOOPPHHOONN
       This  page  is  part  of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information
       about   reporting    bugs,    and    the    latest    version    of    this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

Linux                                                  2017-09-15                                              READV(2)
