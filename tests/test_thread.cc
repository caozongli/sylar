#include "sylar/sylar.h"sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();int count = 0;int ff = 0;sylar::Mutex s_mutex;void fun1(){    SYLAR_LOG_INFO(g_logger) << "name: " << sylar::Thread::GetName()                            << " this.name: " << sylar::Thread::GetThis()->getName()                            << " id: " << sylar::GetThreadId()                            << " this.id: " << sylar::Thread::GetThis()->getId();    sylar::Mutex::Lock lock(s_mutex);    for(ff = 0; ff < 10000; ff++){        ++count;        usleep(1);    }}void fun2(){    while(1)        SYLAR_LOG_INFO(g_logger) << "xxxxxxx" << "xxxxxxxxxxxxx";}void fun3(){    while(1)        SYLAR_LOG_INFO(g_logger) << "=========" << "===========";}int main(int argc, char** argv){    std::cout << "hd" << std::endl;    SYLAR_LOG_INFO(SYLAR_LOG_ROOT()) << "thread test begin";    YAML::Node root = YAML::LoadFile("/home/sylar/worksapce/sylar/bin/conf/log2.yml");    sylar::Config::LoadFromYaml(root);    std::vector<sylar::Thread::ptr> thrs;    for(int i = 0; i < 5; i++){        sylar::Thread::ptr thr(new sylar::Thread(&fun2, "name_"+std::to_string(i*2)));        sylar::Thread::ptr thr2(new sylar::Thread(&fun3, "name_"+std::to_string(i*2)));        thrs.push_back(thr);        thrs.push_back(thr2);    }    for(size_t i = 0; i < thrs.size(); i++){        thrs[i]->join();    }    SYLAR_LOG_INFO(SYLAR_LOG_ROOT()) << "thread test end";    SYLAR_LOG_INFO(SYLAR_LOG_ROOT()) << "count=" << count;       return 0;}